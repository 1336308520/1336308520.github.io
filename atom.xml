<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>百度搜不到丶的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://133608520.github.io/"/>
  <updated>2019-07-17T11:42:45.766Z</updated>
  <id>https://133608520.github.io/</id>
  
  <author>
    <name>LYH</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java-异常和集合</title>
    <link href="https://133608520.github.io/2019/07/17/2/"/>
    <id>https://133608520.github.io/2019/07/17/2/</id>
    <published>2019-07-17T11:40:48.000Z</published>
    <updated>2019-07-17T11:42:45.766Z</updated>
    
    <content type="html"><![CDATA[<h1 id="7月13日异常和集合"><a href="#7月13日异常和集合" class="headerlink" title="7月13日异常和集合"></a>7月13日异常和集合</h1><h1 id="异常"><a href="#异常" class="headerlink" title=" 异常 "></a><font color="red"> 异常 </font></h1><hr><ul><li><strong>常见的几种异常类型 都继承自Exception，产生异常时，后面的语句不再执行（如果没有try，catch的话</strong> ）</li><li><strong>try，catch，finally语句</strong></li><li><strong>在方法中的语句抛出异常throw new Exception（）；</strong></li><li><strong>方法抛出异常，在声明的后面加上 throws **</strong></li><li><strong>可以多个catch，不过按顺序，第一个接受了就不会给第二个了</strong></li><li><strong>finnally无论如何都会执行，就算是catch里面有return也依然会执行</strong></li></ul><h1 id="集合"><a href="#集合" class="headerlink" title=" 集合 "></a><font color="red"> 集合 </font></h1><p><strong>要清楚各种集合之间的关系，collection是List和Set的父类，不过三者都是接口，均不能实例化，List的实现类有ArrayList（常用）和LinkedList两者区别不大，Set实现子类有HashSet（常用）和TreeSet</strong><br><strong>Map接口及其实现类HashMap，Map不能包含重复的键</strong> </p><h2 id="集合种的几种常用方法"><a href="#集合种的几种常用方法" class="headerlink" title="集合种的几种常用方法"></a><font color="red">集合种的几种常用方法</font></h2><p>•<strong>Collaction接口的常用方法：size，isEmpty，contains，add，remove，iterator</strong> </p><p><strong>-list集合和set集合的区别，list集合可以加入重复的数据，set集合不可以，list集合是有顺序的，Hashset是无序的</strong> </p><h2 id="ArrayList常用的方法："><a href="#ArrayList常用的方法：" class="headerlink" title="ArrayList常用的方法："></a><font color="red">ArrayList常用的方法：</font></h2><p><strong>•get（index）返回指定位置的元素，特有<br>•indexOf（object o）返回指定元素的所在位置<br>•注意用remove方法的时候，删除一个后，后一个数移动到该位置上来</strong> </p><h2 id="HashMap常用的方法："><a href="#HashMap常用的方法：" class="headerlink" title="HashMap常用的方法："></a><font color="red">HashMap常用的方法：</font></h2><p><strong>•put（key，valve）<br>•get（key）返回指定键所对应的映射值<br>•remove（key）如果存在一个键的映射关系那么移除<br>•containKey（key）<br>•containValve（valve）<br>•set&lt; Entry&lt;key,value&gt;&gt;entrySet() 将Map变为Set，这样才能使用set的方法，从而使map和collection联系</strong> </p><h2 id="遍历集合或者Map的方法"><a href="#遍历集合或者Map的方法" class="headerlink" title="遍历集合或者Map的方法"></a><font color="red">遍历集合或者Map的方法</font></h2><p><strong>•for（？：？）方法<br>•Iterator<br>-List和Set使用迭代器<br>•Iterator i = list.Iterator();</strong><br><strong>Map要想使用迭代器必须先转换成set（通过entrySet方法）</strong></p><h2 id="遍历的时候主要是用到两个方法"><a href="#遍历的时候主要是用到两个方法" class="headerlink" title="-遍历的时候主要是用到两个方法"></a><font color="red">-遍历的时候主要是用到两个方法</font></h2><p><strong>•hasNext（）<br>•next（）<br>-注意set，list，map，Itterator后面都是跟着范型的</strong> </p><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a><font color="red">文件</font></h1><p><strong>•java.io.File<br>•– File用于表示硬盘中的一个文件或者文件夹<br>•– File对象是java对象，包含文件的各种属性<br>•– File对象可以代表还不存在的文件或文件夹<br>•– File对象可以调用各种方法例如创建或删除<br>•createNewFile和mkdir和mkdirs方法的区别<br>•file.delete()可以删除文件和空文件夹，但是不能删除包含了一个有文件的文件夹</strong>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;7月13日异常和集合&quot;&gt;&lt;a href=&quot;#7月13日异常和集合&quot; class=&quot;headerlink&quot; title=&quot;7月13日异常和集合&quot;&gt;&lt;/a&gt;7月13日异常和集合&lt;/h1&gt;&lt;h1 id=&quot;异常&quot;&gt;&lt;a href=&quot;#异常&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="Java个人笔记" scheme="https://133608520.github.io/categories/Java%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java个人笔记" scheme="https://133608520.github.io/tags/Java%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>第一篇博客——MarkDown学习</title>
    <link href="https://133608520.github.io/2019/07/16/1/"/>
    <id>https://133608520.github.io/2019/07/16/1/</id>
    <published>2019-07-16T05:40:03.000Z</published>
    <updated>2019-07-16T06:07:15.356Z</updated>
    
    <content type="html"><![CDATA[<h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><blockquote><p>这里有四种方式                      </p><h2 id="行内式"><a href="#行内式" class="headerlink" title="行内式"></a>行内式</h2><p>行内式：[链接文字](http:<a href="http://www.hao123.com" target="_blank" rel="noopener">www.hao123.com</a> “链接属性”),（）里面写链接地址和链接属性，两者之间有一个空格，属性要加&quot; “<br>下面做一个实验：<br><a href="http:www.hao123.com" title="百度搜不到·" target="_blank" rel="noopener">链接文字，链接到百度</a><br>好吧，应该是成功了，不过发现了一个问题，在引用里换行时候不需要输入两个空格     </p></blockquote><h2 id="参考式"><a href="#参考式" class="headerlink" title="参考式"></a>参考式</h2><p>分为两部分，先把链接文字写成来，给它做个标记，然后在下面在个标记赋值，也许你会问，这只是我的怀疑，我怀疑:代表赋值，语法大体如下：<br>这是[百度] [1]<br>[1]: http:<a href="http://www.hao123.com" target="_blank" rel="noopener">www.hao123.com</a> “百度搜不到”<br>参考式有一个优点就是在文章里有多个链接引用的时候，可以更好的对连接进行统一整理。</p><h2 id="自动连接"><a href="#自动连接" class="headerlink" title="自动连接"></a>自动连接</h2><p>&lt;&gt;，代表自动链接，符号里面写网址，Markdown就会自动把它转换成链接，链接文字和链接地址一样，下面来实验一下自动链接百度<br><a href="http:www.hao123.com" target="_blank" rel="noopener">http:www.hao123.com</a></p><blockquote><h2 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h2><p>链接到文章内部的叫锚点，具体语法如下：<br>语法和html一样。这里不写代码直接演示<br><a name="maodian"> 锚点 </a><br><a href="#maodian">跳转到锚点 </a></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>使用   <em>，+，-表示无序列表         *</em>发现了一个问题，在引用中你输入几个空格，它就显示几个空格,还不错**<br>三个符号代表的无序列表显示是一样的，选择一种即可，我选择 *<br>代码如下：</p><blockquote><p>- 无序列表项 一<br>- 无序列表项二<br>- 无序列表项三<br>显示效果如下:</p><ul><li>无序列表项  一</li><li>无序列表项  二</li><li>无序列表项  三</li></ul></blockquote><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>代码如下：</p><blockquote><p>1. 有序列表 一<br>2. 有序列表 二<br>3. 有序列表 三<br>显示效果：</p><ol><li>有序列表项 一 </li><li>有序列表项 二</li><li>有序列表项 三<br>注意.后面有一个空格</li></ol></blockquote><h2 id="包含段落的列表"><a href="#包含段落的列表" class="headerlink" title="包含段落的列表"></a>包含段落的列表</h2><p>下面介绍包含段落列表：<br>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; - 这是第一行</span><br><span class="line">&gt; 第一段</span><br><span class="line">&gt; 第二段</span><br><span class="line">&gt; -这是第二行</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>显示效果如下：  </p><ul><li>这是第一行<br>第一段<br>第二段</li><li>这是第二行<h2 id="包含引用或者代码块的列表"><a href="#包含引用或者代码块的列表" class="headerlink" title="包含引用或者代码块的列表"></a>包含引用或者代码块的列表</h2>代码如下：<br>*    阅读的方法：<blockquote><p>打开书本<br>打开电灯<br>显示效果如下：</p></blockquote></li></ul><ul><li>阅读的方法：<blockquote><p>打开书本<br>打开电灯</p></blockquote></li></ul><p>下面介绍包含代码块的：<br>代码如下：<br>* 包含代码快<br>    &lt;代码写在这里&gt;<br>显示效果如下:</p><ul><li>包含代码块  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 大家好，我是列表下的代码块</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li>让我看看这是哪一行？</li></ul></blockquote><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote><p>首先这就是在一个引用里面写的<br>代码如下：<br>&gt; 这是一个引用<br>显示效果如下：</p><blockquote><p>这是一个引用<br>当然由于本身已经在引用里面了所以这里发生了引用的多层嵌套，根据上面可以看出引用里面也可以使用其他语法，比如列表之类的</p></blockquote></blockquote><h2 id="插入图像"><a href="#插入图像" class="headerlink" title="插入图像"></a>插入图像</h2><blockquote><p>插图像挺痛疼的，图床建立需要花钱，免费的又不稳定，只能在本地里面一张张的存图片了，哎<br>代码:<br>![图片描述]（图片地址 “图片Title”)<br>显示效果：这里就不做演示了<br>还有一种方法参考式和超链接的参考式一样</p></blockquote><h2 id="内容目录"><a href="#内容目录" class="headerlink" title="内容目录"></a>内容目录</h2><blockquote><p>在段落中写[]已显示全文内容的目录结构,里面是大写的toc<br>代码:<br>[TOC]</p><p>显示效果：</p><p>[TOC]<br>可以在任意的位置添加</p></blockquote><h2 id="注脚"><a href="#注脚" class="headerlink" title="注脚"></a>注脚</h2><blockquote><p>注脚就是课本上对某些文字做注解的地方，一般课本的最后有做过注脚地方的解释。<br>代码：<br>这是一个注脚[^1]<br>[^1]：注脚是一种解释<br>显示效果如下:<br>这是一个注脚[^1]<br>[^1]: 注脚是一种解释<br><strong>脚注自动搬运到最后面，请到文章末尾查看，并且脚注后方的链接可以直接跳转到加注的地方</strong></p></blockquote><h2 id="LaTeX公式"><a href="#LaTeX公式" class="headerlink" title="LaTeX公式"></a>LaTeX公式</h2><blockquote><p>第一次见，初次见面，请多多关照🤭</p><ol><li>$表示行内公式</li><li>$$表示整行公式</li></ol></blockquote><h2 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h2><blockquote><p>代码:<br>- [ ] 吃饭,代表没有选中的复选<br>- [x] 吃饭,代表选中的复选<br>显示效果如下:</p><ul><li><input disabled type="checkbox"> 吃饭,代表没有选中的复选</li><li><input checked disabled type="checkbox"> 吃饭,代表选中的复选</li></ul></blockquote><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><blockquote><ol><li>不管哪种方式,第一行为表头,第二行分隔表头和主体部分,第三行开始每一行为一个表格行</li><li>列和列之间使用管道符|隔开</li><li>第二行可以为不同的列指定对齐方式.默认为左对齐,在-右边加上:,该列就会右对齐<br>代码如下:<br>学号|姓名</li></ol><p>-|-|-<br>123|小明<br>显示效果如下:</p><blockquote><table><thead><tr><th>学号</th><th>姓名</th></tr></thead><tbody><tr><td>123</td><td>小明</td></tr></tbody></table></blockquote></blockquote><p>##　代码</p><blockquote><ul><li>行内代码</li><li>多行代码</li><li>缩进式<ul><li>子序列1<ul><li>子子序列</li></ul></li></ul></li></ul><p>下面推出<br><strong>上面又发现了多级列表的嵌套规则,根据*前面的制表符数匹配</strong><br><strong>如何退出无序列表</strong><br><strong>通过添加一个空白行</strong></p></blockquote><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>代码:<br>***<br>显示效果如下:</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;超链接&quot;&gt;&lt;a href=&quot;#超链接&quot; class=&quot;headerlink&quot; title=&quot;超链接&quot;&gt;&lt;/a&gt;超链接&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;这里有四种方式                      &lt;/p&gt;
&lt;h2 id=&quot;行内式&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="MarkDown学习笔记" scheme="https://133608520.github.io/categories/MarkDown%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="MarkDown学习笔记" scheme="https://133608520.github.io/tags/MarkDown%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
