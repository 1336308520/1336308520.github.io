<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Oracle学习-3]]></title>
    <url>%2F2019%2F07%2F23%2F7%2F</url>
    <content type="text"><![CDATA[Oracle常用函数字符函数数字函数日期函数转换函数系统函数 字符函数lower(char)：将字符串转化为小写的格式。upper(char)：将字符串转化为大写的格式。 length(char)：返回字符串的长度。 substr(char, start, len)：截取字符串的子串，n代表取n个字符的意思，不是代表取到第n个 replace(char1, search_string, replace_string) instr(C1,C2,I,J) –&gt;判断某字符或字符串是否存在，存在返回出现的位置的索引，否则返回小于1;在一个字符串中搜索指定的字符,返回发现指定的字符的位置; C1 被搜索的字符串 C2 希望搜索的字符串 I 搜索的开始位置,默认为1 J 出现的位置,默认为1 问题：将所有员工的名字按小写的方式显示 SQL&gt; select lower(ename) from emp; 问题：将所有员工的名字按大写的方式显示。 SQL&gt; select upper(ename) from emp; 问题：显示正好为5个字符的员工的姓名。 SQL&gt; select * from emp where length(ename)=5; 问题：显示所有员工姓名的前三个字符。 SQL&gt; select substr(ename, 1, 3) from emp; 问题：以首字母大写,后面小写的方式显示所有员工的姓名。 SQL&gt; select upper(substr(ename,1,1)) || lower(substr(ename,2,length(ename)-1)) from emp; 问题：以首字母小写,后面大写的方式显示所有员工的姓名。 SQL&gt; select lower(substr(ename,1,1)) || upper(substr(ename,2,length(ename)-1)) from emp; 问题：显示所有员工的姓名，用“我是老虎”替换所有“A” SQL&gt; select replace(ename,’A’, ‘我是老虎’) from emp; 问题：instr(char1,char2,[,n[,m]])用法 SQL&gt; select instr(‘azhangsanbcd’, ‘zhangsan’) from dual; –返回2 SQL&gt; select instr(‘oracle traning’, ‘ra’, 1, 1) instring from dual; –返回2 SQL&gt; select instr(‘oracle traning’, ‘ra’, 1, 2) instring from dual; –返回9 SQL&gt; select instr(‘oracle traning’, ‘ra’, 1, 3) instring from dual; –返回0，根据条件，由于ra只出现二次，第四个参数3，就是说第3次出现ra的位置，显然第3次是没有再出现了，所以结果返回0。注意空格也算一个字符 SQL&gt; select instr(‘abc’,’d’) from dual; –返回0 数字四舍五入函数数学函数的输入参数和返回值的数据类型都是数字类型的。数学函数包括cos，cosh，exp，ln, log，sin，sinh，sqrt，tan，tanh，acos，asin，atan，round等 我们讲最常用的： round(n,[m]) 该函数用于执行四舍五入， 如果省掉m，则四舍五入到整数。 如果m是正数，则四舍五入到小数点的m位后。 如果m是负数，则四舍五入到小数点的m位前。 Eg:SELECT round(23.75123) FROM dual; –返回24 SELECT round(23.75123, -1) FROM dual; –返回20 SELECT round(27.75123, -1) FROM dual; –返回30 SELECT round(23.75123, -3) FROM dual; –返回0 SELECT round(23.75123, 1) FROM dual; –返回23.8 SELECT round(23.75123, 2) FROM dual; –返回23.75 SELECT round(23.75123, 3) FROM dual; –返回23.751 数字截取函数trunc(n,[m]) 该函数用于截取数字。 如果省掉m，就截去小数部分， 如果m是正数就截取到小数点的m位后， 如果m是负数，则截取到小数点的前m位。 Eg：SELECT trunc(23.75123) FROM dual; –返回23 SELECT trunc(23.75123, -1) FROM dual; –返回20 SELECT trunc(27.75123, -1) FROM dual; –返回20 SELECT trunc(23.75123, -3) FROM dual; –返回0 SELECT trunc(23.75123, 1) FROM dual; –返回23.7 SELECT trunc(23.75123, 2) FROM dual; –返回23.75 SELECT trunc(23.75123, 3) FROM dual; –返回23.751 数字函数1234567891011mod(m,n)取余函数(取模)eg、select mod(10,2) from dual; --返回0SELECT MOD(10,3) FROM dual; --返回1floor(n) 返回小于或是等于n的最大整数ceil(n) 返回大于或是等于n的最小整数eg、SELECT ceil(24.56) from dual; --返回25 SELECT floor(24.56) from dual; --返回24abs(n) 返回数字n的绝对值对数字的处理，在财务系统或银行系统中用的最多，不同的处理方法，对财务报表有不同的结果 日期函数1234567891011121314151617181920日期函数用于处理date类型的数据。默认情况下日期格式是dd-mon-yy 即“06-8 月-14” (1)sysdate 返回系统时间eg:SQL&gt; select sysdate from dual;(2)oracle add_months函数oracle add_months(time,months)可以得到某一时间之前或之后n个月的时间eg：select add_months(sysdate,-6) from dual;--该查询的结果是当前时间半年前的时间select add_months(sysdate,6) from dual; --该查询的结果是当前时间半年后的时间 (3) last_day(d) ：返回指定日期所在月份的最后一天 问题：查找已经入职8个月多的员工 SQL&gt; select * from emp where sysdate&gt;=add_months(hiredate,8); 问题：显示满10年服务年限的员工的姓名和受雇日期。 SQL&gt; select ename, hiredate from emp where sysdate&gt;=add_months(hiredate,12*10); 问题：对于每个员工，显示其加入公司的天数。 SQL&gt; select floor(sysdate-hiredate) "入职天数",ename from emp; 或者 SQL&gt; select trunc(sysdate-hiredate) "入职天数",ename from emp; 问题：找出各月倒数第3天受雇的所有员工。 SQL&gt; select hiredate,ename from emp where last_day(hiredate)-2=hiredate; 转换函数 123456789&gt; 转换函数用于将数据类型从一种转为另外一种。在某些情况下，oracle server允许值的数据类型和实际的不一样，这时oracle server会隐含的转化数据类型&gt; 比如：&gt; create table t1(id number);&gt; insert into t1 values('10');--这样oracle会自动的将'10' --&gt;10&gt; create table t2 (id varchar2(10));&gt; insert into t2 values(1); --这样oracle就会自动的将1 --&gt;'1'；&gt; 我们要说的是尽管oracle可以进行隐含的数据类型的转换，但是它并不适应所有的情况，为了提高程序的可靠性，我们应该使用转换函数进行转换。&gt; &gt; 12345678910111213141516171819to_char()函数你可以使用select ename, hiredate, sal from emp where deptno = 10;显示信息，可是，在某些情况下，这个并不能满足你的需求。问题：日期是否可以显示 时/分/秒SQL&gt; select ename, to_char(hiredate, 'yyyy-mm-dd hh24:mi:ss') from emp;问题：薪水是否可以显示指定的货币符号SQL&gt;yy：两位数字的年份 2004--&gt;04 yyyy：四位数字的年份 2004年mm：两位数字的月份 8 月--&gt;08 dd：两位数字的天 30 号--&gt;30hh24： 8点--&gt;20 hh12：8点--&gt;08mi、ss--&gt;显示分钟\秒 9：显示数字，并忽略前面00：显示数字，位数不足则用0补齐 .：在指定位置显示小数点,：在指定位置显示逗号 $：在数字前加美元L：在数字前面加本地货币符号 C：在数字前面加国际货币符号 G：在指定位置显示组分隔符、 D：在指定位置显示小数点符号(.)问题：显示薪水的时候，把本地货币单位加在前面SQL&gt; select ename, to_char(hiredate, ‘yyyy-mm-dd hh24:mi:ss’), to_char(sal,‘￥99999.99') from emp;问题：显示1980年入职的所有员工SQL&gt; select * from emp where to_char(hiredate, 'yyyy')=1980;问题：显示所有12月份入职的员工SQL&gt; select * from emp where to_char(hiredate, 'mm')=12; 12345678910111213141516171819202122to_date()函数函数to_date用于将字符串转换成date类型的数据。 问题：能否按照中国人习惯的方式年—月—日添加日期。eg、SELECT to_date('2012-02-18 09:25:30','yyyy-mm-dd hh24:mi:ss') FROM dual;Year: yy two digits 两位年 显示值:07yyy three digits 三位年 显示值:007yyyy four digits 四位年 显示值:2007Month: mm number 两位月 显示值:11mon abbreviated 字符集表示 显示值:11月,若是英文版,显示nov month spelled out 字符集表示 显示值:11月,若是英文版,显示november Day: dd number 当月第几天 显示值:02ddd number 当年第几天 显示值:02dy abbreviated 当周第几天简写 显示值:星期五,若是英文版,显示friday spelled out 当周第几天全写 显示值:星期五,若是英文版,显示friday Hour: hh two digits 12小时进制 显示值:01hh24 two digits 24小时进制 显示值:13 Minute: mi two digits 60进制 显示值:45Second: ss two digits 60进制 显示值:25其它: Q digit 季度 显示值:4WW digit 当年第几周 显示值:44W digit 当月第几周 显示值:124小时格式下时间范围为： 0:00:00 - 23:59:59.... s12小时格式下时间范围为： 1:00:00 - 12:59:59 .... sys_context()系统函数1234567891011121314主要参数：1)terminal：当前会话客户所对应的终端的标示符，如计算机名2)language: 语言3)db_name： 当前数据库名称4)nls_date_format： 当前会话客户所对应的日期格式5)session_user： 当前会话客户所对应的数据库用户名6)current_schema： 当前会话客户所对应的默认方案名7)host： 返回数据库所在主机的名称通过sys_context函数，可以查询一些重要信息，比如你正在使用哪个数据库：select sys_context('USERENV','db_name') from dual;注意：USERENV是固定的，不能改的，db_name可以换成其它,eg、select sys_context('USERENV','language') from dualselect sys_context('USERENV',‘host') from dual;]]></content>
      <categories>
        <category>Oracle学习</category>
      </categories>
      <tags>
        <tag>Oracle学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle数据库-1]]></title>
    <url>%2F2019%2F07%2F22%2F6%2F</url>
    <content type="text"><![CDATA[http://charles-pc:1158/em –企业管理控制台http://charles-pc:5560/isqlplus –网页命令行工具http://charles-pc:5560/isqlplus/dba –网页命令行工具（DBA专用） 系统服务： OracleDBConsoleorcl：企业管理控制台OracleOraDb10g_home1iSQL*Plus：网页命令行OracleOraDb11g_home1TNSListener：远程监听OracleServiceORCL：数据库实例 以上4个服务可以设置为手动启动，以免影响开机速度，==前两个都是辅助，后两个必须启动== SQL：操作数据库用户登录：1.网页iSQLplus2.SQLPlus（白框）3.cmd sqlplus /nolog (黑框) SYS:超级管理员SYSTEM:普通管理员 使用数据库时应该使用普通用户通常管理员账号都是用来做管理 命令行（黑框）：conn 用户名/密码 ; 创建用户张三，密码为abccreate user zhangsan identified by abc; 授权“创建会话”给张三grant create session to zhangsan; create session是一个权限，用于登录 权限体系：用户 - 角色 - 权限 用户：用户名密码组合，用于识别身份角色：一个职位，可以拥有很多权限权限：功能，具体能做的事情 DEMO：create role java; –创建角色名为javagrant connect,resource to java; –为java角色授权grant java to zhangsan; –把java角色授权给张三revoke java from zhangsan; –撤销授权 — 超级管理员登录 —方式1：sqlplus / as sysdba 方式2：sqlplus /nologconn / as sysdba 方式3：sqlplussys as sysdbamima 修改用户密码：alter user 用户名 identified by 新密码; 锁定用户：alter user 用户名 account lock; 用户解锁：alter user 用户名 account unlock; 删除用户：drop user 用户名; Oracle卸载 直接注册表清除，步骤如下： 1、 开始－&gt;设置－&gt;控制面板－&gt;管理工具－&gt;服务 停止所有Oracle服务。 2、 开始－&gt;程序－&gt;Oracle - OraHome81－&gt;Oracle Installation Products－&gt; Universal Installer 卸装所有Oracle产品，但Universal Installer本身不能被删除 5、 运行regedit，选择HKEY_LOCAL_MACHINE\SOFTWARE\ORACLE，按del键删除这个入口。 6、 运行regedit，选择HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services，滚动 这个列表，删除所有Oracle入口。 7、 运行refedit， HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Eventlog\Application， 删除所有Oracle入口。 8、 开始－&gt;设置－&gt;控制面板－&gt;系统－&gt;高级－&gt;环境变量 删除环境变量CLASSPATH和PATH中有关Oracle的设定 9、 从桌面上、STARTUP（启动）组、程序菜单中，删除所有有关Oracle的组和图标 10、 删除\Program Files\Oracle目录 11、 重新启动计算机，重起后才能完全删除Oracle所在目录 12、 删除与Oracle有关的文件，选择Oracle所在的缺省目录C:\Oracle，删除这个入 口目录及所有子目录，并从Windows 2000目录（一般为C:\WINNT）下删除以下文 件ORACLE.INI、oradim73.INI、oradim80.INI、oraodbc.ini等等。 13、 WIN.INI文件中若有[ORACLE]的标记段，删除该段 14、 如有必要，删除所有Oracle相关的ODBC的DSN 15、 到事件查看器中，删除Oracle相关的日志]]></content>
      <categories>
        <category>Oracle学习</category>
      </categories>
      <tags>
        <tag>Oracle学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle数据库-2]]></title>
    <url>%2F2019%2F07%2F22%2F5%2F</url>
    <content type="text"><![CDATA[Oracle数据库介绍Oracle数据库中常用的数据类型SQL中常用的命令分类及其使用 Oracle数据库 ORACLE 是以高级结构化查询语言(SQL)为基础的大型关系数据库，通俗地 讲它是用方便逻辑管理的语言去操纵大量有规律数据的集合。是目前最流行的客户端/服务器(CLIENT/SERVER)体系结构的数据库之一。 Oracle数据库中常用的数据类型 分类 数据类型 说明 文本、二进制类型 CHAR(size) char(20) 定长 最大2000字符 文本、二进制类型 VARCHAR(size) varchar(20) ==Varchar2(size)== 变长 最大4000字符 文本、二进制类型 nchar(n) Unicode数据类型 ,定长 最大2000字符 文本、二进制类型 nvarchar2(n) Unicode数据类型 ,变长 最大4000字符 文本、二进制类型 clob(character large object) 字符型大对象 ,最大8tb 文本、二进制类型 blob(binary large object) 二进制数据 可以存放图片/声音 8tb 数值类型 number(p,s) p为整数位,s为小数位.范围： 1 &lt;= p &lt;=38, -84 &lt;= s &lt;= 127 保存数据范围：-1.0e-130 &lt;= number value &lt; 1.0e+126 保存在机器内部的范围： 1 ~ 22 bytes 时间日期 date TIMESTAMP(n) 包含年月日,时分秒。默认格式：DD-MON-YYYY。从公元前4712年1月1日到公元4712年12月31日的所有合法日期 n的取值为0~9.表示指定TIMESTAMP中秒的小数位数。N为可选。如果n为0，timestamp与date等价[不推荐] SQL中常用的命令分类及其使用创建表1234567CREATE TABLE table_name( field1 datatype, field2 datatype, field3 datatype)field：指定列名 datatype：指定列类型 修改表使用 ALTER TABLE 语句添加, 修改, 或删除列的语法. 12345678910ALTER TABLE tablenameADD (columnname datatype);ALTER TABLE tableMODIFY (columnname datatype);ALTER TABLE tableDROP column column;修改表的名称：rename 表名 to 新表名 表中数据的管理 Insert语句 (增加数据) Update语句 (更新数据) Delete语句 (删除数据) Select语句 (查找数据) 增加数据- Insert12INSERT INTO table [(column [, column...])]VALUES (value [, value...]); 插入的数据应与字段的数据类型相同。 数据的大小应在列的规定范围内，例如：不能将一个长度为80的字符串加入到长度为40的列中。 在values中列出的数据位置必须与被加入的列的排列位置相对应。字符和日期型数据应包含在==单引号==中。 插入空值，不指定或insert into table value(null) 例如： 新建学生：Insert into student(id,name,salary,birthday)values (1001,’盖伦’,’6500’,null); 基本查询1SELECT [DISTINCT] *|&#123;column1, column2. column3..&#125;FROM Select 指定查询哪些列的数据。 column指定列名，*号代表查询所有列。 From指定查询哪张表。 DISTINCT可选，指显示结果时，是否剔除重复数据 修改数据- Update123UPDATE tbl_name SET col_name1=expr1 [, col_name2=expr2 ...] [WHERE where_definition] UPDATE语法可以用新值更新原有表行中的各列。 SET子句指示要修改哪些列和要给予哪些值。 WHERE子句指定应更新哪些行。如没有WHERE子句，则更新所有的行 删除数据1234567delete from 表名; 删除所有记录,表结构还在,写日志,可以恢复的,速度慢delete from student where xh='A001'; 删除一条记录drop table 表名; 删除表的结构和数据truncate table 表名; //不常用删除表中的所有记录,表结构还在,不写日志,无法找回删除的记录,速度快 SQL中常用的命令分类及其使用DDL （Data Definition Language ）数据库定义语言 :statements are used to define the database structure or schema，DDL不需要commit. CREATE ：创建 ALTER ：修改 DROP ：删除 TRUNCATE ：截断 COMMENT ：注释 RENAME ：重命名 DML （Data Manipulation Language）数据操纵语言:statements are used for managing data within schema objects，DML需要commit. SELECT ：查询记录 INSERT ：插入记录 UPDATE ：更新记录 DELETE ：删除记录 MERGE ：CALL ：调用 EXPLAIN PLAN：执行计划 LOCK TABLE ：锁表 DCL（Data Control Language）数据库控制语言:授权，角色控制等 *GRANT：授权 * REVOKE：取消授权 TCL（Transaction Control Language）事务控制语言 事务是一个不可分割的工作逻辑单元，可以使用事务来保证数据库的一致性和可恢复性，事务中的sql语句，==成功都成功，失败都失败。== 事务的ACID特性（4个英文首字母缩写）原子性一致性隔离性持久性 COMMIT命令用于提交并结束事务处理，对数据库执行永久性的事务更改SAVEPOINT保存点类似于标记，它将很长的事务处理划分为较小的部分。ROLLBACK命令用来撤销在当前事务中已完成的操作]]></content>
      <categories>
        <category>Oracle学习</category>
      </categories>
      <tags>
        <tag>Oracle学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网络编程和线程]]></title>
    <url>%2F2019%2F07%2F20%2F4%2F</url>
    <content type="text"><![CDATA[[TOC] 网络编程网络协议TCP/IPUDP网络编程Socket/ServerSocketDatagramSocket 网络协议TCP协议是一个面向连接的、可靠的协议TCP(transmission control protocol)是专门设计用于在不可靠的因特网上提供可靠的、端到端的字节流通信的协议。它是一种面向连接的协议。TCP连接是字节流而非报文流。UDP协议是一个不可靠的、无连接协议UDP(user datagram protocol )UDP向应用程序提供了一种发送封装的原始IP数据报的方法、并且发送时无需建立连接。是一种不可靠的连接。 TCP编程TCP编程java.net.Socketjava.net.ServerSocket TCP编程的核心思路 开发服务器端ServerSocket ss = new ServerSocket(9000)ss.accept();开发客户端Socket s = new Socket(“150.236.56.101”, 9000) TCP编程 Server Client ServerSocket(port) Socket(server,port) ServerSocket.accept(); OutputStream Socket() InputStream OutputStream InputStream Socket.close() Socket.close() 总结服务器端：创建ServerSocket对象（并绑定端口）调用accept方法，等待来自客户端的连接调用getXXXStream方法，进行I/O关闭Socket客户端：创建Socket对象，并连接服务器调用getXXXStream方法，进行I/O关闭Socket UDP编程UDP协议简介UDP是一个无连接，不可靠的协议。即：数据的发送方只负责将数据发送出去，数据的接受方只负责接受数据。发送方和接收方不会相互确认数据的传输是否成功。 UDP编程12java.net.DatagramSocketjava.net. DatagramPacket UDP编程的核心思路12DatagramSocket socket = new DatagramSocket(9000) //接收端DatagramSocket socket = new DatagramSocket() //发送端 12345DatagramPacketDatagramPacket(byte[] buf, int off, int length)DatagramPacket(byte[] buf, int ,length, SoketAddress)getAddress()/getSockAddress()/getPort()/getLength()setAddress()/setSockAddress()/setPort()/setLength() 线程什么是线程在一个程序中同时运行的多个独立流程，每一个独立的流程就是一个线程线程并发多个线程并发执行主线程当JVM启动之后，加载类文件，发现main方法，那么就会为main方法创建一个线程，用于main方法执行，这个为main方法创建的线程称为主线程 Java中线程的使用在Java中创建线程的方法有两种 方法一继承java.lang.Thread类 方法二实现java.lang.Runnable接口 继承Thread类 自定义一个线程类继承自Thread 重写Thread的run方法 创建一个该类的对象 调用该类继承自Thread的start方法开启线程 Runnable接口开发线程 用户开发一个类实现Runnable接口 实现run() 运行线程 sleep方法void sleep(long time)方法用于使当前线程休眠指定的毫秒数 join方法 利用sleep方法对线程的控制是非常不精确的 join方法可以精确控制线程 join方法也会导致线程阻塞 特点：如果当前线程中调用了另外一个线程的 join方法，当前线程会立即阻塞，直到另外一个线程运行完成 线程同步产生数据不一致的原因多个线程并发访问了同一个对象，如果破坏了不可分割的操作，从而就会造成数据不一致被多线程并发访问时如果一个对象有可能出现数据不一致的问题,那么这个对象称为线程不安全的对象 如何解决多线程并发访问的问题123synchronized(object)&#123; 代码块 &#125;]]></content>
      <categories>
        <category>Java个人笔记</category>
      </categories>
      <tags>
        <tag>Java个人笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[文件和I/O流]]></title>
    <url>%2F2019%2F07%2F18%2F3%2F</url>
    <content type="text"><![CDATA[文件和I/O流大纲[TOC] 文件创建File对象File类的构造方法 由于File类的每一个对象都表示的是一个具体的目录或者文件，所以File类没有提供无参的构造方法，File类的所有构造方法都需要一个目录或者文件的路径作为参数 12345* File(String pathname)* File(String parent, String child)* File(File parent, String child) File类常用方法12345678910111213File类常用方法 boolean createNewFile()创建一个新文件 boolean mkdir() / mkdirs()创建新的目录 boolean delete() 删除文件或者目录 void deleteOnExit() 虚拟机退出时删除文件或者目录 boolean exists() 判断当前文件或者目录是否存在 boolean isFile() 判断File对象代表的是否是一个文件 boolean isDirectory() 判断File对象代表的是否是一个目录 String getPath() 返回当前File对象的字符串路径 String getName()返回当前File对象的文件名或者目录名 String getParent()返回当前File对象的父级目录 String getAbsolutePath()返回当前File对象的绝对路径 String[]list()返回当前File对象包含的子目录以及文件 HTML折叠语法12345&lt;details&gt; &lt;summary&gt;点击时的区域标题：点击查看详细内容&lt;/summary&gt; &lt;p&gt; - 测试 测试测试&lt;/p&gt; &lt;pre&gt;&lt;code&gt; title，value，callBack可以缺省 &lt;/code&gt; &lt;/pre&gt;&lt;/details&gt; 显示效果 点击时的区域标题：点击查看详细内容 - 测试 测试测试 title，value，callBack可以缺省 流==流在使用的时候一定要关闭，使用多种类型的流时，关闭最外层的流即可== 流的分类 按照流传输方向不同输入流（InputStream）输出流（OutputStream）按照处理数据类型的不同字节流字符流按照流的基本功能不同节点流过滤流 字节流字节流的概念传输的数据单位是字节，也意味着字节流能够处理任何一种文件字节流的组成字节输入流 InputStream（注意它是接口不能背实例化，使用时候一般结合FileInputStream实例化）字节输出流 OutputStream（注意它是接口不能背实例化使用时候一般结合FileOutputStream实例化） FileInputStream字节输入流类FileInputStream常用方法构造方法12FileInputStream (String filename)FileInputStream (File file) 常用方法1234close() int read()int read(byte[]b)int read(byte[] bs, int off, int len) FileOutputStream字节输出流类FileOutputStream常用方法常用构造方法1234FileOutputStream(String path)FileOutputStream(File file)FileOutputStream(String path, boolean append)FileOutputStream(File file, boolean append) 常用方法1234close()void write(int v)void write(byte[] bs)void write(byte[] bs, int off, int len) 字符流字符编码常见的 编码规范（字符集）ASCIIISO-8859-1GBKUTF-8乱码问题 FileReader123FileReader(String fileName)close()int read(char[] cbuf) FileWriter123FileWriter(String fileName)close()write(String value) InputStreamReader和OutputStreamWriter 特点：可以把一个字节流转换成一个字符流 在转换时可以执行编码方式 InputStreamReader123InputStreamReader(InputStream is)InputStreamReader(InputStream is ,String charSet)int read(char[] cbuf) OutputStreamWriter123OutputStreamWriter(OutputStream is) OutputStreamWriter(nOuputtStream is, String charSet)write(String value) 过滤流 Data Stream DataInputStream readXxx(); DataOutputStream writeXxx(); 过滤流的开发步骤 创建节点流 基于节点流创建过滤流 读/写数据 关闭外层流 创建节点流1FileOutputStream fout = new FileOutputStream("pi.data") 封装过滤流1DataOutputStream dout = new DataOutputStream(fout) 写数据1dout.writeDouble(3.14); 关闭外层流1dout.close() 1234567891011121314151617//创建节点流FileInputStream fin = new FileInputStream("pi.data");//封装过滤流DataInputStream din = new DataInputStream（fin);//读数据double pi = din.readDouble();//关闭外层流din.close();system.out.println(pi); BufferedOutputStream和基本字节输出流的区别：带了缓冲区，基本方法都一样 ObjectStream涉及概念：对象序列化（需要类实现Serializable接口,但并不需要实现具体方法） 操作对象的 123456ObjectStreamObjectInputStream ObjectOutputStreamObjectStream特点 writeObject() readObject() 12345678class Student implements Serializable&#123; String name; int age; public Student(Student name,int age)&#123; this.name = name; this.age = age; &#125;&#125; 123456Student stu1 = new Student("tom",18);Student stu2 = new Student("jerry",18);FileOutputStream oout = new ObjectOutputStream(fout);oout.writeObject(stu1);oout.writeObject(stu2);oout.close(); 1234567FileInputStream fin = new FileInputStream("stu.dat");ObjectInputStream oin = new ObjectInputStream(fin);Student s1 = (Student)oin.readObject();Studetn s2 = (Student)oin.readObject();oin.close();system.out.println(s1.name+""+s1.age);system.out.println(s2.name+""+s2.age); transient 关键字 序列化时注意事项不要使用追加的方式写对象如果一个对象的属性又是一个对象，则要求这个属性对象也实现了Serializable接口 ###]]></content>
      <categories>
        <category>Java个人笔记</category>
      </categories>
      <tags>
        <tag>Java个人笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java-异常和集合]]></title>
    <url>%2F2019%2F07%2F17%2F2%2F</url>
    <content type="text"><![CDATA[7月13日异常和集合 异常 常见的几种异常类型 都继承自Exception，产生异常时，后面的语句不再执行（如果没有try，catch的话 ） try，catch，finally语句 在方法中的语句抛出异常throw new Exception（）； 方法抛出异常，在声明的后面加上 throws ** 可以多个catch，不过按顺序，第一个接受了就不会给第二个了 finnally无论如何都会执行，就算是catch里面有return也依然会执行 集合 要清楚各种集合之间的关系，collection是List和Set的父类，不过三者都是接口，均不能实例化，List的实现类有ArrayList（常用）和LinkedList两者区别不大，Set实现子类有HashSet（常用）和TreeSetMap接口及其实现类HashMap，Map不能包含重复的键 集合种的几种常用方法•Collaction接口的常用方法：size，isEmpty，contains，add，remove，iterator -list集合和set集合的区别，list集合可以加入重复的数据，set集合不可以，list集合是有顺序的，Hashset是无序的 ArrayList常用的方法：•get（index）返回指定位置的元素，特有•indexOf（object o）返回指定元素的所在位置•注意用remove方法的时候，删除一个后，后一个数移动到该位置上来 HashMap常用的方法：•put（key，valve）•get（key）返回指定键所对应的映射值•remove（key）如果存在一个键的映射关系那么移除•containKey（key）•containValve（valve）•set&lt; Entry&lt;key,value&gt;&gt;entrySet() 将Map变为Set，这样才能使用set的方法，从而使map和collection联系 遍历集合或者Map的方法•for（？：？）方法•Iterator-List和Set使用迭代器•Iterator i = list.Iterator();Map要想使用迭代器必须先转换成set（通过entrySet方法） -遍历的时候主要是用到两个方法•hasNext（）•next（）-注意set，list，map，Itterator后面都是跟着范型的 文件•java.io.File•– File用于表示硬盘中的一个文件或者文件夹•– File对象是java对象，包含文件的各种属性•– File对象可以代表还不存在的文件或文件夹•– File对象可以调用各种方法例如创建或删除•createNewFile和mkdir和mkdirs方法的区别•file.delete()可以删除文件和空文件夹，但是不能删除包含了一个有文件的文件夹]]></content>
      <categories>
        <category>Java个人笔记</category>
      </categories>
      <tags>
        <tag>Java个人笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第一篇博客——MarkDown学习]]></title>
    <url>%2F2019%2F07%2F16%2F1%2F</url>
    <content type="text"><![CDATA[超链接 这里有四种方式 行内式行内式：[链接文字](http:www.hao123.com “链接属性”),（）里面写链接地址和链接属性，两者之间有一个空格，属性要加&quot; “下面做一个实验：链接文字，链接到百度好吧，应该是成功了，不过发现了一个问题，在引用里换行时候不需要输入两个空格 参考式分为两部分，先把链接文字写成来，给它做个标记，然后在下面在个标记赋值，也许你会问，这只是我的怀疑，我怀疑:代表赋值，语法大体如下：这是[百度] [1][1]: http:www.hao123.com “百度搜不到”参考式有一个优点就是在文章里有多个链接引用的时候，可以更好的对连接进行统一整理。 自动连接&lt;&gt;，代表自动链接，符号里面写网址，Markdown就会自动把它转换成链接，链接文字和链接地址一样，下面来实验一下自动链接百度http:www.hao123.com 锚点链接到文章内部的叫锚点，具体语法如下：语法和html一样。这里不写代码直接演示 锚点 跳转到锚点 列表无序列表使用 ，+，-表示无序列表 *发现了一个问题，在引用中你输入几个空格，它就显示几个空格,还不错**三个符号代表的无序列表显示是一样的，选择一种即可，我选择 *代码如下： - 无序列表项 一- 无序列表项二- 无序列表项三显示效果如下: 无序列表项 一 无序列表项 二 无序列表项 三 有序列表代码如下： 1. 有序列表 一2. 有序列表 二3. 有序列表 三显示效果： 有序列表项 一 有序列表项 二 有序列表项 三注意.后面有一个空格 包含段落的列表下面介绍包含段落列表：代码如下： 12345&gt; - 这是第一行&gt; 第一段&gt; 第二段&gt; - 这是第二行&gt; 显示效果如下： 这是第一行第一段第二段 这是第二行包含引用或者代码块的列表代码如下：* 阅读的方法： 打开书本打开电灯显示效果如下： 阅读的方法： 打开书本打开电灯 下面介绍包含代码块的：代码如下：* 包含代码快 &lt;代码写在这里&gt;显示效果如下: 包含代码块 12&gt; 大家好，我是列表下的代码块&gt; 让我看看这是哪一行？ 引用 首先这就是在一个引用里面写的代码如下：&gt; 这是一个引用显示效果如下： 这是一个引用当然由于本身已经在引用里面了所以这里发生了引用的多层嵌套，根据上面可以看出引用里面也可以使用其他语法，比如列表之类的 插入图像 插图像挺痛疼的，图床建立需要花钱，免费的又不稳定，只能在本地里面一张张的存图片了，哎代码:![图片描述]（图片地址 “图片Title”)显示效果：这里就不做演示了还有一种方法参考式和超链接的参考式一样 内容目录 在段落中写[]已显示全文内容的目录结构,里面是大写的toc代码:[TOC] 显示效果： [TOC]可以在任意的位置添加 注脚 注脚就是课本上对某些文字做注解的地方，一般课本的最后有做过注脚地方的解释。代码：这是一个注脚[^1][^1]：注脚是一种解释显示效果如下:这是一个注脚[^1][^1]: 注脚是一种解释脚注自动搬运到最后面，请到文章末尾查看，并且脚注后方的链接可以直接跳转到加注的地方 LaTeX公式 第一次见，初次见面，请多多关照🤭 $表示行内公式 $$表示整行公式 任务列表 代码:- [ ] 吃饭,代表没有选中的复选- [x] 吃饭,代表选中的复选显示效果如下: 吃饭,代表没有选中的复选 吃饭,代表选中的复选 表格 不管哪种方式,第一行为表头,第二行分隔表头和主体部分,第三行开始每一行为一个表格行 列和列之间使用管道符|隔开 第二行可以为不同的列指定对齐方式.默认为左对齐,在-右边加上:,该列就会右对齐代码如下:学号|姓名 -|-|-123|小明显示效果如下: 学号 姓名 123 小明 ## 代码 行内代码 多行代码 缩进式 子序列1 子子序列 下面推出上面又发现了多级列表的嵌套规则,根据*前面的制表符数匹配如何退出无序列表通过添加一个空白行 分割线代码:***显示效果如下:]]></content>
      <categories>
        <category>MarkDown学习笔记</category>
      </categories>
      <tags>
        <tag>MarkDown学习笔记</tag>
      </tags>
  </entry>
</search>
