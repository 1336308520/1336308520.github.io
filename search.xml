<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[网络编程和线程]]></title>
    <url>%2F2019%2F07%2F20%2F4%2F</url>
    <content type="text"><![CDATA[[TOC] 网络编程网络协议TCP/IPUDP网络编程Socket/ServerSocketDatagramSocket 网络协议TCP协议是一个面向连接的、可靠的协议TCP(transmission control protocol)是专门设计用于在不可靠的因特网上提供可靠的、端到端的字节流通信的协议。它是一种面向连接的协议。TCP连接是字节流而非报文流。UDP协议是一个不可靠的、无连接协议UDP(user datagram protocol )UDP向应用程序提供了一种发送封装的原始IP数据报的方法、并且发送时无需建立连接。是一种不可靠的连接。 TCP编程TCP编程java.net.Socketjava.net.ServerSocket TCP编程的核心思路 开发服务器端ServerSocket ss = new ServerSocket(9000)ss.accept();开发客户端Socket s = new Socket(“150.236.56.101”, 9000) TCP编程 Server Client ServerSocket(port) Socket(server,port) ServerSocket.accept(); OutputStream Socket() InputStream OutputStream InputStream Socket.close() Socket.close() 总结服务器端：创建ServerSocket对象（并绑定端口）调用accept方法，等待来自客户端的连接调用getXXXStream方法，进行I/O关闭Socket客户端：创建Socket对象，并连接服务器调用getXXXStream方法，进行I/O关闭Socket UDP编程UDP协议简介UDP是一个无连接，不可靠的协议。即：数据的发送方只负责将数据发送出去，数据的接受方只负责接受数据。发送方和接收方不会相互确认数据的传输是否成功。 UDP编程12java.net.DatagramSocketjava.net. DatagramPacket UDP编程的核心思路12DatagramSocket socket = new DatagramSocket(9000) //接收端DatagramSocket socket = new DatagramSocket() //发送端 12345DatagramPacketDatagramPacket(byte[] buf, int off, int length)DatagramPacket(byte[] buf, int ,length, SoketAddress)getAddress()/getSockAddress()/getPort()/getLength()setAddress()/setSockAddress()/setPort()/setLength() 线程什么是线程在一个程序中同时运行的多个独立流程，每一个独立的流程就是一个线程线程并发多个线程并发执行主线程当JVM启动之后，加载类文件，发现main方法，那么就会为main方法创建一个线程，用于main方法执行，这个为main方法创建的线程称为主线程 Java中线程的使用在Java中创建线程的方法有两种 方法一继承java.lang.Thread类 方法二实现java.lang.Runnable接口 继承Thread类 自定义一个线程类继承自Thread 重写Thread的run方法 创建一个该类的对象 调用该类继承自Thread的start方法开启线程 Runnable接口开发线程 用户开发一个类实现Runnable接口 实现run() 运行线程 sleep方法void sleep(long time)方法用于使当前线程休眠指定的毫秒数 join方法 利用sleep方法对线程的控制是非常不精确的 join方法可以精确控制线程 join方法也会导致线程阻塞 特点：如果当前线程中调用了另外一个线程的 join方法，当前线程会立即阻塞，直到另外一个线程运行完成 线程同步产生数据不一致的原因多个线程并发访问了同一个对象，如果破坏了不可分割的操作，从而就会造成数据不一致被多线程并发访问时如果一个对象有可能出现数据不一致的问题,那么这个对象称为线程不安全的对象 如何解决多线程并发访问的问题123synchronized(object)&#123; 代码块 &#125;]]></content>
      <categories>
        <category>Java个人笔记</category>
      </categories>
      <tags>
        <tag>Java个人笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[文件和I/O流]]></title>
    <url>%2F2019%2F07%2F18%2F3%2F</url>
    <content type="text"><![CDATA[文件和I/O流大纲[TOC] 文件创建File对象File类的构造方法 由于File类的每一个对象都表示的是一个具体的目录或者文件，所以File类没有提供无参的构造方法，File类的所有构造方法都需要一个目录或者文件的路径作为参数 12345* File(String pathname)* File(String parent, String child)* File(File parent, String child) File类常用方法12345678910111213File类常用方法 boolean createNewFile()创建一个新文件 boolean mkdir() / mkdirs()创建新的目录 boolean delete() 删除文件或者目录 void deleteOnExit() 虚拟机退出时删除文件或者目录 boolean exists() 判断当前文件或者目录是否存在 boolean isFile() 判断File对象代表的是否是一个文件 boolean isDirectory() 判断File对象代表的是否是一个目录 String getPath() 返回当前File对象的字符串路径 String getName()返回当前File对象的文件名或者目录名 String getParent()返回当前File对象的父级目录 String getAbsolutePath()返回当前File对象的绝对路径 String[]list()返回当前File对象包含的子目录以及文件 HTML折叠语法12345&lt;details&gt; &lt;summary&gt;点击时的区域标题：点击查看详细内容&lt;/summary&gt; &lt;p&gt; - 测试 测试测试&lt;/p&gt; &lt;pre&gt;&lt;code&gt; title，value，callBack可以缺省 &lt;/code&gt; &lt;/pre&gt;&lt;/details&gt; 显示效果 点击时的区域标题：点击查看详细内容 - 测试 测试测试 title，value，callBack可以缺省 流==流在使用的时候一定要关闭，使用多种类型的流时，关闭最外层的流即可== 流的分类 按照流传输方向不同输入流（InputStream）输出流（OutputStream）按照处理数据类型的不同字节流字符流按照流的基本功能不同节点流过滤流 字节流字节流的概念传输的数据单位是字节，也意味着字节流能够处理任何一种文件字节流的组成字节输入流 InputStream（注意它是接口不能背实例化，使用时候一般结合FileInputStream实例化）字节输出流 OutputStream（注意它是接口不能背实例化使用时候一般结合FileOutputStream实例化） FileInputStream字节输入流类FileInputStream常用方法构造方法12FileInputStream (String filename)FileInputStream (File file) 常用方法1234close() int read()int read(byte[]b)int read(byte[] bs, int off, int len) FileOutputStream字节输出流类FileOutputStream常用方法常用构造方法1234FileOutputStream(String path)FileOutputStream(File file)FileOutputStream(String path, boolean append)FileOutputStream(File file, boolean append) 常用方法1234close()void write(int v)void write(byte[] bs)void write(byte[] bs, int off, int len) 字符流字符编码常见的 编码规范（字符集）ASCIIISO-8859-1GBKUTF-8乱码问题 FileReader123FileReader(String fileName)close()int read(char[] cbuf) FileWriter123FileWriter(String fileName)close()write(String value) InputStreamReader和OutputStreamWriter 特点：可以把一个字节流转换成一个字符流 在转换时可以执行编码方式 InputStreamReader123InputStreamReader(InputStream is)InputStreamReader(InputStream is ,String charSet)int read(char[] cbuf) OutputStreamWriter123OutputStreamWriter(OutputStream is) OutputStreamWriter(nOuputtStream is, String charSet)write(String value) 过滤流 Data Stream DataInputStream readXxx(); DataOutputStream writeXxx(); 过滤流的开发步骤 创建节点流 基于节点流创建过滤流 读/写数据 关闭外层流 创建节点流1FileOutputStream fout = new FileOutputStream("pi.data") 封装过滤流1DataOutputStream dout = new DataOutputStream(fout) 写数据1dout.writeDouble(3.14); 关闭外层流1dout.close() 1234567891011121314151617//创建节点流FileInputStream fin = new FileInputStream("pi.data");//封装过滤流DataInputStream din = new DataInputStream（fin);//读数据double pi = din.readDouble();//关闭外层流din.close();system.out.println(pi); BufferedOutputStream和基本字节输出流的区别：带了缓冲区，基本方法都一样 ObjectStream涉及概念：对象序列化（需要类实现Serializable接口,但并不需要实现具体方法） 操作对象的 123456ObjectStreamObjectInputStream ObjectOutputStreamObjectStream特点 writeObject() readObject() 12345678class Student implements Serializable&#123; String name; int age; public Student(Student name,int age)&#123; this.name = name; this.age = age; &#125;&#125; 123456Student stu1 = new Student("tom",18);Student stu2 = new Student("jerry",18);FileOutputStream oout = new ObjectOutputStream(fout);oout.writeObject(stu1);oout.writeObject(stu2);oout.close(); 1234567FileInputStream fin = new FileInputStream("stu.dat");ObjectInputStream oin = new ObjectInputStream(fin);Student s1 = (Student)oin.readObject();Studetn s2 = (Student)oin.readObject();oin.close();system.out.println(s1.name+""+s1.age);system.out.println(s2.name+""+s2.age); transient 关键字 序列化时注意事项不要使用追加的方式写对象如果一个对象的属性又是一个对象，则要求这个属性对象也实现了Serializable接口 ###]]></content>
      <categories>
        <category>Java个人笔记</category>
      </categories>
      <tags>
        <tag>Java个人笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java-异常和集合]]></title>
    <url>%2F2019%2F07%2F17%2F2%2F</url>
    <content type="text"><![CDATA[7月13日异常和集合 异常 常见的几种异常类型 都继承自Exception，产生异常时，后面的语句不再执行（如果没有try，catch的话 ） try，catch，finally语句 在方法中的语句抛出异常throw new Exception（）； 方法抛出异常，在声明的后面加上 throws ** 可以多个catch，不过按顺序，第一个接受了就不会给第二个了 finnally无论如何都会执行，就算是catch里面有return也依然会执行 集合 要清楚各种集合之间的关系，collection是List和Set的父类，不过三者都是接口，均不能实例化，List的实现类有ArrayList（常用）和LinkedList两者区别不大，Set实现子类有HashSet（常用）和TreeSetMap接口及其实现类HashMap，Map不能包含重复的键 集合种的几种常用方法•Collaction接口的常用方法：size，isEmpty，contains，add，remove，iterator -list集合和set集合的区别，list集合可以加入重复的数据，set集合不可以，list集合是有顺序的，Hashset是无序的 ArrayList常用的方法：•get（index）返回指定位置的元素，特有•indexOf（object o）返回指定元素的所在位置•注意用remove方法的时候，删除一个后，后一个数移动到该位置上来 HashMap常用的方法：•put（key，valve）•get（key）返回指定键所对应的映射值•remove（key）如果存在一个键的映射关系那么移除•containKey（key）•containValve（valve）•set&lt; Entry&lt;key,value&gt;&gt;entrySet() 将Map变为Set，这样才能使用set的方法，从而使map和collection联系 遍历集合或者Map的方法•for（？：？）方法•Iterator-List和Set使用迭代器•Iterator i = list.Iterator();Map要想使用迭代器必须先转换成set（通过entrySet方法） -遍历的时候主要是用到两个方法•hasNext（）•next（）-注意set，list，map，Itterator后面都是跟着范型的 文件•java.io.File•– File用于表示硬盘中的一个文件或者文件夹•– File对象是java对象，包含文件的各种属性•– File对象可以代表还不存在的文件或文件夹•– File对象可以调用各种方法例如创建或删除•createNewFile和mkdir和mkdirs方法的区别•file.delete()可以删除文件和空文件夹，但是不能删除包含了一个有文件的文件夹]]></content>
      <categories>
        <category>Java个人笔记</category>
      </categories>
      <tags>
        <tag>Java个人笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第一篇博客——MarkDown学习]]></title>
    <url>%2F2019%2F07%2F16%2F1%2F</url>
    <content type="text"><![CDATA[超链接 这里有四种方式 行内式行内式：[链接文字](http:www.hao123.com “链接属性”),（）里面写链接地址和链接属性，两者之间有一个空格，属性要加&quot; “下面做一个实验：链接文字，链接到百度好吧，应该是成功了，不过发现了一个问题，在引用里换行时候不需要输入两个空格 参考式分为两部分，先把链接文字写成来，给它做个标记，然后在下面在个标记赋值，也许你会问，这只是我的怀疑，我怀疑:代表赋值，语法大体如下：这是[百度] [1][1]: http:www.hao123.com “百度搜不到”参考式有一个优点就是在文章里有多个链接引用的时候，可以更好的对连接进行统一整理。 自动连接&lt;&gt;，代表自动链接，符号里面写网址，Markdown就会自动把它转换成链接，链接文字和链接地址一样，下面来实验一下自动链接百度http:www.hao123.com 锚点链接到文章内部的叫锚点，具体语法如下：语法和html一样。这里不写代码直接演示 锚点 跳转到锚点 列表无序列表使用 ，+，-表示无序列表 *发现了一个问题，在引用中你输入几个空格，它就显示几个空格,还不错**三个符号代表的无序列表显示是一样的，选择一种即可，我选择 *代码如下： - 无序列表项 一- 无序列表项二- 无序列表项三显示效果如下: 无序列表项 一 无序列表项 二 无序列表项 三 有序列表代码如下： 1. 有序列表 一2. 有序列表 二3. 有序列表 三显示效果： 有序列表项 一 有序列表项 二 有序列表项 三注意.后面有一个空格 包含段落的列表下面介绍包含段落列表：代码如下： 12345&gt; - 这是第一行&gt; 第一段&gt; 第二段&gt; - 这是第二行&gt; 显示效果如下： 这是第一行第一段第二段 这是第二行包含引用或者代码块的列表代码如下：* 阅读的方法： 打开书本打开电灯显示效果如下： 阅读的方法： 打开书本打开电灯 下面介绍包含代码块的：代码如下：* 包含代码快 &lt;代码写在这里&gt;显示效果如下: 包含代码块 12&gt; 大家好，我是列表下的代码块&gt; 让我看看这是哪一行？ 引用 首先这就是在一个引用里面写的代码如下：&gt; 这是一个引用显示效果如下： 这是一个引用当然由于本身已经在引用里面了所以这里发生了引用的多层嵌套，根据上面可以看出引用里面也可以使用其他语法，比如列表之类的 插入图像 插图像挺痛疼的，图床建立需要花钱，免费的又不稳定，只能在本地里面一张张的存图片了，哎代码:![图片描述]（图片地址 “图片Title”)显示效果：这里就不做演示了还有一种方法参考式和超链接的参考式一样 内容目录 在段落中写[]已显示全文内容的目录结构,里面是大写的toc代码:[TOC] 显示效果： [TOC]可以在任意的位置添加 注脚 注脚就是课本上对某些文字做注解的地方，一般课本的最后有做过注脚地方的解释。代码：这是一个注脚[^1][^1]：注脚是一种解释显示效果如下:这是一个注脚[^1][^1]: 注脚是一种解释脚注自动搬运到最后面，请到文章末尾查看，并且脚注后方的链接可以直接跳转到加注的地方 LaTeX公式 第一次见，初次见面，请多多关照🤭 $表示行内公式 $$表示整行公式 任务列表 代码:- [ ] 吃饭,代表没有选中的复选- [x] 吃饭,代表选中的复选显示效果如下: 吃饭,代表没有选中的复选 吃饭,代表选中的复选 表格 不管哪种方式,第一行为表头,第二行分隔表头和主体部分,第三行开始每一行为一个表格行 列和列之间使用管道符|隔开 第二行可以为不同的列指定对齐方式.默认为左对齐,在-右边加上:,该列就会右对齐代码如下:学号|姓名 -|-|-123|小明显示效果如下: 学号 姓名 123 小明 ## 代码 行内代码 多行代码 缩进式 子序列1 子子序列 下面推出上面又发现了多级列表的嵌套规则,根据*前面的制表符数匹配如何退出无序列表通过添加一个空白行 分割线代码:***显示效果如下:]]></content>
      <categories>
        <category>MarkDown学习笔记</category>
      </categories>
      <tags>
        <tag>MarkDown学习笔记</tag>
      </tags>
  </entry>
</search>
